install.packages("rsconnect")
install.packages("rsconnect")
install.packages("RCurl")
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
head(rawData)
hist(rawData$rt)
meanRT<-mean(rawData$rt)
sdRT<- sd(rawData$rt)
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$RT)
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
head(data)
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="Incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="Incongruent" & targetSide=="right")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
condition=rep(0,404)
summaryMeasures<-read.csv("processed.csv")
xNorm<-read.csv("nx.csv")
summaryMeasures<-read.csv("processed.csv")
xNorm<-read.csv("nx.csv")
yNorm<-read.csv("ny.csv")
rawData <- cbind(summaryMeasures,xNorm,yNorm)
names(rawData)
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
head(dataStep3)
rawData <- data.frame(summaryMeasures,xNorm,yNorm)
head(rawData)
rawData$rt
rawData <- cbind(summaryMeasures,xNorm,yNorm)
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(as.numeric(dataStep3$rt))
sdRT<-sd(dataStep3$rt)
sdRT<-sd(as.numeric(dataStep3$rt))
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
rawData$rt <- as.numeric(rawData$rt)
hist(rawData$rt)
setwd("~/github/MT_flanker/exp1/results/")
summaryMeasures<-read.csv("processed.csv")
xNorm<-read.csv("nx.csv")
yNorm<-read.csv("ny.csv")
hist(summaryMeasures$rt)
hist(as.numeric(summaryMeasures$rt))
summaryMeasures$rt
head(summaryMeasures)
rawData <- cbind(summaryMeasures,xNorm,yNorm)
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
dataStep3$rt
dataStep3<-subset(rawData,subset=accuracy==1 | rt=="None") # remove errors
dataStep3
length(rawData$rt[rawData$rt=="None"])
dataStep3$rt
dataStep3<-subset(rawData,subset=accuracy==1 & rt!="None") # remove errors
dataStep3$rt
rawData <- cbind(summaryMeasures,xNorm,yNorm)
X<-summaryMeasures$rt[summaryMeasures$rt=="None"]
X
hist(as.numeric(dataStep3$rt))
sort(rawData$rt)
dataStep3<-subset(rawData,subset=accuracy==1 & response!=-1) # remove errors
meanRT<-mean(as.numeric(dataStep3$rt))
sdRT<-sd(as.numeric(dataStep3$rt))
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
hist(dataStep3$rt)
dataStep3$rt <- as.numeric(dataStep3$rt)
hist(dataStep3$rt)
sort(dataStep3$rt)
dataStep3$rt <- as.numeric(as.character(dataStep3$rt))
hist(dataStep3$rt)
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
hist(data$rt)
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
condition=rep(0,404)
names(dataLeftCongruent)
for (i in 1:101){
xCoords[i]=mean(dataLeftCongruent[,i+13])
yCoords[i]=mean(dataLeftCongruent[,i+114])
side[i]="left"
condition[i]="congruent"
xCoords[i+101]=mean(dataLeftIncongruent[,i+13])
yCoords[i+101]=mean(dataLeftIncongruent[,i+114])
side[i+101]="left"
condition[i+101]="incongruent"
xCoords[i+202]=mean(dataRightCongruent[,i+13])
yCoords[i+202]=mean(dataRightCongruent[,i+114])
side[i+202]="right"
condition[i+202]="congruent"
xCoords[i+303]=mean(dataRightIncongruent[,i+13])
yCoords[i+303]=mean(dataRightCongruent[,i+114])
side[i+303]="right"
condition[i+303]="incongruent"
}
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
trajectoryData=data.frame(xCoords,yCoords,side,condition)
plot=ggplot(trajectoryData,aes(x=xCoords,y=yCoords,group=condition))+xlim(-1,1)+ylim(0,1.5)
paths=geom_path(aes(linetype=condition),size=1.3)
labels=labs(x="x-coordinates",y="y-coordinates")
faceting=facet_grid(.~side)
stripFormat=theme(strip.text=element_text(face="bold",size=rel(1.5)))
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axesFormat=theme(axis.title=element_text(size=rel(1.4)))
basePlot=plot+paths+labels+faceting+stripFormat+legendFormat+axesFormat
basePlot+labs(colour="Condition")+theme(legend.position=c(0.5,0.5))+theme(legend.background=element_rect(fill="white",colour="black"))
for (i in 1:101){
xCoords[i]=-mean(dataLeftCongruent[,i+13])
yCoords[i]=mean(dataLeftCongruent[,i+114])
side[i]="left"
condition[i]="congruent"
xCoords[i+101]=-mean(dataLeftIncongruent[,i+13])
yCoords[i+101]=mean(dataLeftIncongruent[,i+114])
side[i+101]="left"
condition[i+101]="incongruent"
xCoords[i+202]=mean(dataRightCongruent[,i+13])
yCoords[i+202]=mean(dataRightCongruent[,i+114])
side[i+202]="right"
condition[i+202]="congruent"
xCoords[i+303]=mean(dataRightIncongruent[,i+13])
yCoords[i+303]=mean(dataRightCongruent[,i+114])
side[i+303]="right"
condition[i+303]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(xCoords,yCoords,side,condition)
plot=ggplot(trajectoryData,aes(x=xCoords,y=yCoords,group=condition))+xlim(-1,1)+ylim(0,1.5)
paths=geom_path(aes(linetype=condition),size=1.3)
labels=labs(x="x-coordinates",y="y-coordinates")
faceting=facet_grid(.~side)
stripFormat=theme(strip.text=element_text(face="bold",size=rel(1.5)))
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axesFormat=theme(axis.title=element_text(size=rel(1.4)))
basePlot=plot+paths+labels+faceting+stripFormat+legendFormat+axesFormat
basePlot+labs(colour="Condition")+theme(legend.position=c(0.5,0.5))+theme(legend.background=element_rect(fill="white",colour="black"))
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
condition=rep(0,404)
for (i in 1:101){
xCoords[i]=-mean(dataLeftCongruent[,i+13])
yCoords[i]=mean(dataLeftCongruent[,i+114])
side[i]="left"
condition[i]="congruent"
xCoords[i+101]=-mean(dataLeftIncongruent[,i+13])
yCoords[i+101]=mean(dataLeftIncongruent[,i+114])
side[i+101]="left"
condition[i+101]="incongruent"
xCoords[i+202]=mean(dataRightCongruent[,i+13])
yCoords[i+202]=mean(dataRightCongruent[,i+114])
side[i+202]="right"
condition[i+202]="congruent"
xCoords[i+303]=mean(dataRightIncongruent[,i+13])
yCoords[i+303]=mean(dataRightCongruent[,i+114])
side[i+303]="right"
condition[i+303]="incongruent"
}
unique(data$subject_nr)
length(unique(data$subject_nr)
)
13200/31
13200/32
`13200/33`
13200/33
data$subject_nr
data$rt[data$subject_nr==121]
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
SEmatrixLeftCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject==i)
leftIncongruent<-subset(dataLeftIncongruent,subject==i)
rightCongruent<-subset(dataRightCongruent,subject==i)
rightIncongruent<-subset(dataRightIncongruent,subject==i)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i)
rightCongruent<-subset(dataRightCongruent,subject_nr==i)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
names(dataLeftCongruent)
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i+100)
rightCongruent<-subset(dataRightCongruent,subject_nr==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
unique(data$subject_nr)

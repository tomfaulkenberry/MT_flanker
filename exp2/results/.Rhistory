xCoords[i+101]=-mean(dataLeftIncongruent[,i+13])
yCoords[i+101]=mean(dataLeftIncongruent[,i+114])
side[i+101]="left"
condition[i+101]="incongruent"
xCoords[i+202]=mean(dataRightCongruent[,i+13])
yCoords[i+202]=mean(dataRightCongruent[,i+114])
side[i+202]="right"
condition[i+202]="congruent"
xCoords[i+303]=mean(dataRightIncongruent[,i+13])
yCoords[i+303]=mean(dataRightCongruent[,i+114])
side[i+303]="right"
condition[i+303]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(xCoords,yCoords,side,condition)
plot=ggplot(trajectoryData,aes(x=xCoords,y=yCoords,group=condition))+xlim(-1,1)+ylim(0,1.5)
paths=geom_path(aes(linetype=condition),size=1.3)
labels=labs(x="x-coordinates",y="y-coordinates")
faceting=facet_grid(.~side)
stripFormat=theme(strip.text=element_text(face="bold",size=rel(1.5)))
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axesFormat=theme(axis.title=element_text(size=rel(1.4)))
basePlot=plot+paths+labels+faceting+stripFormat+legendFormat+axesFormat
basePlot+labs(colour="Condition")+theme(legend.position=c(0.5,0.5))+theme(legend.background=element_rect(fill="white",colour="black"))
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
condition=rep(0,404)
for (i in 1:101){
xCoords[i]=-mean(dataLeftCongruent[,i+13])
yCoords[i]=mean(dataLeftCongruent[,i+114])
side[i]="left"
condition[i]="congruent"
xCoords[i+101]=-mean(dataLeftIncongruent[,i+13])
yCoords[i+101]=mean(dataLeftIncongruent[,i+114])
side[i+101]="left"
condition[i+101]="incongruent"
xCoords[i+202]=mean(dataRightCongruent[,i+13])
yCoords[i+202]=mean(dataRightCongruent[,i+114])
side[i+202]="right"
condition[i+202]="congruent"
xCoords[i+303]=mean(dataRightIncongruent[,i+13])
yCoords[i+303]=mean(dataRightCongruent[,i+114])
side[i+303]="right"
condition[i+303]="incongruent"
}
unique(data$subject_nr)
length(unique(data$subject_nr)
)
13200/31
13200/32
`13200/33`
13200/33
data$subject_nr
data$rt[data$subject_nr==121]
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
xCoords=rep(0,404)
yCoords=rep(0,404)
side=rep(0,404)
SEmatrixLeftCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject==i)
leftIncongruent<-subset(dataLeftIncongruent,subject==i)
rightCongruent<-subset(dataRightCongruent,subject==i)
rightIncongruent<-subset(dataRightIncongruent,subject==i)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i)
rightCongruent<-subset(dataRightCongruent,subject_nr==i)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
names(dataLeftCongruent)
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i+100)
rightCongruent<-subset(dataRightCongruent,subject_nr==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
unique(data$subject_nr)
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
unique(rawData$subject_nr)
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
unique(data$subject_nr)
unique(dataStep3$subject_nr)
setwd("~/github/MT_flanker/exp1/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors..note: subj 112 had ALL trials as error trials!
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
SEmatrixLeftCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i+100)
rightCongruent<-subset(dataRightCongruent,subject_nr==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
SEmatrixLeftCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
for (i in 1:33){
leftCongruent<-subset(dataLeftCongruent,subject==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject==i+100)
rightCongruent<-subset(dataRightCongruent,subject==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
for (i in 1:32){
leftCongruent<-subset(dataLeftCongruent,subject==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject==i+100)
rightCongruent<-subset(dataRightCongruent,subject==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(33)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(33)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(33)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(33)
condition[i+101]="incongruent"
}
unique(data$subject)
names(data)
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
SEmatrixLeftCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,33*101),nrow=33,ncol=101,byrow=TRUE)
for (i in 1:32){
leftCongruent<-subset(dataLeftCongruent,subject==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject==i+100)
rightCongruent<-subset(dataRightCongruent,subject==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+14])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+14])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+14])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+14])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+14])
xCoordsRight[i]=-mean(dataRightCongruent[,i+14])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+115])
yCoordsRight[i]=mean(dataRightCongruent[,i+115])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(32)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(32)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+14])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+14])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+115])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+115])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(32)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(32)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
SEleft
geom_ribbon
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
ribbonLeft
pathLeft=geom_path(aes(x=yCoordsLeft,linetype=condition),size=0.6)
pathRight=geom_path(aes(x=yCoordsRight,linetype=condition),size=0.6)
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,y=xCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,y=xCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
#theme(strip.text=element_text(face="bold",size=rel(1.5)))
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
head(data)
agg=aggregate(rt~subject+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
aggRT=aggregate(rt~subject+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
RT.aov=aov(rt~congruity*targetSide+Error(as.factor(subject)/(congruity*targetSide)),data=aggRT)
summary(RT.aov)
aggInit=aggregate(init_time~subject+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
Init.aov=aov(init_time~congruity*targetSide+Error(as.factor(subject)/(congruity*targetSide)),data=aggRT)
Init.aov=aov(init_time~congruity*targetSide+Error(as.factor(subject)/(congruity*targetSide)),data=aggInit)
summary(Init.aov)
print(model.tables(RT.aov,"means"),digits=3)
print(model.tables(Init.aov,"means"),digits=3)
data$MT <- data$rt-data$init_time
aggMT=aggregate(MT~subject+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
MT.aov=aov(MT~congruity*targetSide+Error(as.factor(subject)/(congruity*targetSide)),data=aggRT)
MT.aov=aov(MT~congruity*targetSide+Error(as.factor(subject)/(congruity*targetSide)),data=aggMT)
summary(MT.aov)
print(model.tables(MT.aov,"means"),digits=3)
source('~/github/MT_flanker/exp1/results/analysisExp1.R')
setwd("~/github/MT_flanker/exp2/results/")
setwd("~/github/MT_flanker/exp2/results/")
rawData<-read.csv("processed.csv")
dataStep3<-subset(rawData,subset=accuracy==1) # remove errors..note: subj 112 had ALL trials as error trials!
unique(dataStep3$subject_nr)
length(unique(dataStep3$subject_nr))
meanRT<-mean(dataStep3$rt)
sdRT<-sd(dataStep3$rt)
data<-subset(dataStep3,subset=rt<meanRT+3*sdRT & rt>200) # remove 3 SD outliers
dataLeftCongruent<-subset(data,congruity=="congruent" & targetSide=="left")
dataLeftIncongruent<-subset(data,congruity=="incongruent" & targetSide=="left")
dataRightCongruent<-subset(data,congruity=="congruent" & targetSide=="right")
dataRightIncongruent<-subset(data,congruity=="incongruent" & targetSide=="right")
SEmatrixLeftCongruent<-matrix(rep(0,22*101),nrow=22,ncol=101,byrow=TRUE)
SEmatrixLeftIncongruent<-matrix(rep(0,22*101),nrow=22,ncol=101,byrow=TRUE)
SEmatrixRightCongruent<-matrix(rep(0,22*101),nrow=22,ncol=101,byrow=TRUE)
SEmatrixRightIncongruent<-matrix(rep(0,22*101),nrow=22,ncol=101,byrow=TRUE)
names(data)
for (i in 1:22){
leftCongruent<-subset(dataLeftCongruent,subject_nr==i+100)
leftIncongruent<-subset(dataLeftIncongruent,subject_nr==i+100)
rightCongruent<-subset(dataRightCongruent,subject_nr==i+100)
rightIncongruent<-subset(dataRightIncongruent,subject_nr==i+100)
for (j in 1:101){
SEmatrixLeftCongruent[i,j]<-mean(leftCongruent[,j+13])#/sqrt(length(leftCongruent[,j+20]))
SEmatrixLeftIncongruent[i,j]<-mean(leftIncongruent[,j+13])#/sqrt(length(leftIncongruent[,j+20]))
SEmatrixRightCongruent[i,j]<-mean(rightCongruent[,j+13])#/sqrt(length(rightCongruent[,j+20]))
SEmatrixRightIncongruent[i,j]<-mean(rightIncongruent[,j+13])#/sqrt(length(rightIncongruent[,j+20]))
}
}
xCoordsLeft=rep(0,202)
xCoordsRight=rep(0,202)
yCoordsLeft=rep(0,202)
yCoordsRight=rep(0,202)
SEleft=rep(0,202)
SEright=rep(0,202)
condition=rep(0,202)
for (i in 1:101){
xCoordsLeft[i]=mean(dataLeftCongruent[,i+13])
xCoordsRight[i]=-mean(dataRightCongruent[,i+13])
yCoordsLeft[i]=mean(dataLeftCongruent[,i+114])
yCoordsRight[i]=mean(dataRightCongruent[,i+114])
SEleft[i]=sd(SEmatrixLeftCongruent[,i])/sqrt(22)
SEright[i]=sd(SEmatrixRightCongruent[,i])/sqrt(22)
condition[i]="congruent"
xCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+13])
xCoordsRight[i+101]=-mean(dataRightIncongruent[,i+13])
yCoordsLeft[i+101]=mean(dataLeftIncongruent[,i+114])
yCoordsRight[i+101]=mean(dataRightIncongruent[,i+114])
SEleft[i+101]=sd(SEmatrixLeftIncongruent[,i])/sqrt(22)
SEright[i+101]=sd(SEmatrixRightIncongruent[,i])/sqrt(22)
condition[i+101]="incongruent"
}
library("ggplot2")
trajectoryData=data.frame(yCoordsLeft,yCoordsRight,xCoordsLeft,xCoordsRight,SEleft,SEright,condition)
plot=ggplot(trajectoryData,aes())
pathLeft=geom_path(aes(x=yCoordsLeft,y=xCoordsLeft,linetype=condition),size=0.6)
ribbonLeft=geom_ribbon(aes(x=yCoordsLeft,ymin=xCoordsLeft-SEleft,ymax=xCoordsLeft+SEleft,linetype=condition),alpha=0.2)
pathRight=geom_path(aes(x=yCoordsRight,y=xCoordsRight,linetype=condition),size=0.6)
ribbonRight=geom_ribbon(aes(x=yCoordsRight,ymin=xCoordsRight-SEright,ymax=xCoordsRight+SEright,linetype=condition),alpha=0.2)
axisLabels=labs(y="x-coordinates",x="y-coordinates")
legendFormat=theme(legend.title=element_text(face="bold",size=rel(1.5)),legend.text=element_text(size=rel(1.5)))
axisFormat=theme(axis.title=element_text(size=rel(1.4)))
legend=labs(linetype="Condition")+theme(legend.position=c(0.5,1))+theme(legend.background=element_rect(fill="white",colour="black"))
classic=theme_classic(20)+theme(axis.line.x=element_line(color="black",size=0.5,linetype="solid"),axis.line.y=element_line(color="black",size=0.5,linetype="solid"))
plot+pathLeft+ribbonLeft+pathRight+ribbonRight+axisLabels+axisFormat+legend+legendFormat+classic+coord_flip()+xlim(0,1.5)+ylim(-1,1)
aggRT=aggregate(rt~subject+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
aggRT=aggregate(rt~subject_nr+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
RT.aov=aov(rt~congruity*targetSide+Error(as.factor(subject_nr)/(congruity*targetSide)),data=aggRT)
summary(RT.aov)
print(model.tables(RT.aov,"means"),digits=3)
aggInit=aggregate(init_time~subject_nr+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
Init.aov=aov(init_time~congruity*targetSide+Error(as.factor(subject_nr)/(congruity*targetSide)),data=aggInit)
summary(Init.aov)
print(model.tables(Init.aov,"means"),digits=3)
aggMT=aggregate(MT~subject_nr+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
data$MT <- data$rt-data$init_time
aggMT=aggregate(MT~subject_nr+congruity+targetSide,data=data,FUN="mean") # RT performance data aggregated by subject
MT.aov=aov(MT~congruity*targetSide+Error(as.factor(subject_nr)/(congruity*targetSide)),data=aggMT)
summary(MT.aov)
print(model.tables(MT.aov,"means"),digits=3)
